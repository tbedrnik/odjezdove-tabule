/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/v2/gtfs/services": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** GET GTFS Services */
        get: {
            parameters: {
                query?: {
                    /** @description Filter services by specific date in format (YYYY-MM-DD). */
                    date?: string;
                    /** @description Limits number of retrieved items. The maximum is 10000 (default value). */
                    limit?: number;
                    /** @description Number of the first items that are skipped. */
                    offset?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        /** @description Cache control directive for caching proxies */
                        "Cache-Control"?: string;
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["GTFSService"][];
                    };
                };
                401: components["responses"]["UnauthorizedError"];
                /** @description Not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/gtfs/routes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** GET All GTFS Routes */
        get: {
            parameters: {
                query?: {
                    /** @description Limits number of retrieved items. The maximum is 10000 (default value). */
                    limit?: number;
                    /** @description Number of the first items that are skipped. */
                    offset?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        /** @description Cache control directive for caching proxies */
                        "Cache-Control"?: string;
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["GTFSRoute"][];
                    };
                };
                401: components["responses"]["UnauthorizedError"];
                /** @description Not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/gtfs/routes/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** GET GTFS Route */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        /** @description Cache control directive for caching proxies */
                        "Cache-Control"?: string;
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["GTFSRoute"];
                    };
                };
                401: components["responses"]["UnauthorizedError"];
                /** @description Not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/gtfs/trips": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** GET All GTFS Trips */
        get: {
            parameters: {
                query?: {
                    /** @description Filter trips that include specific stop. */
                    stopId?: string;
                    /** @description Filter trips by specific date. */
                    date?: string;
                    /** @description Limits number of retrieved items. The maximum is 10000 (default value). */
                    limit?: number;
                    /** @description Number of the first items that are skipped. */
                    offset?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        /** @description Cache control directive for caching proxies */
                        "Cache-Control"?: string;
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["GTFSTrip"][];
                    };
                };
                401: components["responses"]["UnauthorizedError"];
                /** @description Not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/gtfs/trips/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** GET GTFS Trip */
        get: {
            parameters: {
                query?: {
                    /** @description Enrich trip response object with shapes. */
                    includeShapes?: boolean;
                    /** @description Enrich trip response object with stops. */
                    includeStops?: boolean;
                    /** @description Enrich trip response object with stops times. */
                    includeStopTimes?: boolean;
                    /** @description Enrich trip response object with service. */
                    includeService?: boolean;
                    /** @description Enrich trip response object with routes. */
                    includeRoute?: boolean;
                    /** @description Filter trips by specific date in format (YYYY-MM-DD). */
                    date?: string;
                };
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        /** @description Cache control directive for caching proxies */
                        "Cache-Control"?: string;
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["GTFSTrip"] & {
                            stop_times?: components["schemas"]["GTFSStopTime"][];
                        } & {
                            shapes?: (components["schemas"]["FeaturePoint"] & {
                                properties?: components["schemas"]["GTFSShape"];
                            })[];
                        } & {
                            service?: components["schemas"]["GTFSService"];
                        } & {
                            route?: components["schemas"]["GTFSRoute"];
                        };
                    };
                };
                401: components["responses"]["UnauthorizedError"];
                /** @description Not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/gtfs/shapes/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** GET GTFS Shape */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        /** @description Cache control directive for caching proxies */
                        "Cache-Control"?: string;
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example FeatureCollection */
                            type?: string;
                            features?: (components["schemas"]["FeaturePoint"] & {
                                properties?: components["schemas"]["GTFSShape"];
                            })[];
                        };
                    };
                };
                401: components["responses"]["UnauthorizedError"];
                /** @description Not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/gtfs/stops": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** GET All GTFS Stops */
        get: {
            parameters: {
                query?: {
                    /** @description Name of station. Use with square brackets `names[]=NAME1&names[]=NAME2`. */
                    names?: string;
                    /** @description Get stops by stop_id. Use with square brackets `ids[]`. */
                    ids?: string;
                    /** @description Get stops by ASW, use `_` instead of `/` or encode the slash sign with `%2F`. Use with square brackets `aswId[]`. */
                    aswIds?: string;
                    /** @description Limits number of retrieved items. The maximum is 10000 (default value). */
                    cisIds?: number;
                    /** @description Limits number of retrieved items. The maximum is 10000 (default value). */
                    limit?: number;
                    /** @description Number of the first items that are skipped. */
                    offset?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        /** @description Cache control directive for caching proxies */
                        "Cache-Control"?: string;
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example FeatureCollection */
                            type?: string;
                            features?: (components["schemas"]["FeaturePoint"] & {
                                properties?: components["schemas"]["GTFSStop"];
                            })[];
                        };
                    };
                };
                401: components["responses"]["UnauthorizedError"];
                /** @description Not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/gtfs/stops/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** GET GTFS Stop */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        /** @description Cache control directive for caching proxies */
                        "Cache-Control"?: string;
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["FeaturePoint"] & {
                            properties?: components["schemas"]["GTFSStop"];
                        };
                    };
                };
                401: components["responses"]["UnauthorizedError"];
                /** @description Not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/gtfs/stoptimes/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** GET GTFS Stop times */
        get: {
            parameters: {
                query?: {
                    /** @description Filter stop times by specific date in format (YYYY-MM-DD). */
                    date?: string;
                    /** @description Filter stop times by time departure in format (H:mm:ss). */
                    from?: string;
                    /** @description Filter stop times by time arrival in format (H:mm:ss). */
                    to?: string;
                    /** @description Enrich stop times response object with stop. */
                    includeStop?: boolean;
                    /** @description Limits number of retrieved items. The maximum is 10000 (default value). */
                    limit?: number;
                    /** @description Number of the first items that are skipped. */
                    offset?: number;
                };
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        /** @description Cache control directive for caching proxies */
                        "Cache-Control"?: string;
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["GTFSStopTime"][];
                    };
                };
                401: components["responses"]["UnauthorizedError"];
                /** @description Not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/vehiclepositions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** GET All Vehicle Positions */
        get: {
            parameters: {
                query?: {
                    /** @description Limits number of retrieved items. The maximum is 10000 (default value). */
                    limit?: number;
                    /** @description Number of the first items that are skipped. */
                    offset?: number;
                    /** @description Enrich result dataset with not tracking trip (those trips not being on track - before and after trip) */
                    includeNotTracking?: boolean;
                    /** @description Enrich result dataset with not public trips (trips without run schedule) */
                    includeNotPublic?: boolean;
                    /** @description Filter result by CIS trip number */
                    cisTripNumber?: number;
                    /** @description Preferred timezone offset by given Country/City (use encoded slash sign with `%2F` or use `_` sign) */
                    preferredTimezone?: string;
                    /** @description Filter result by route id */
                    routeId?: string;
                    /** @description Filter result by short name */
                    routeShortName?: string;
                    /** @description Limit results to the ones updated after (timestamp greater than) */
                    updatedSince?: string;
                };
                header?: {
                    /** @description Indicate the content encoding (usually a compression algorithm) that the client can understand. See [mdn](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Accept-Encoding) for more details. Note that for this endpoint, if no value is given, gzip compression will be used by default (the `identity` value can be used to opt out of the default compression). */
                    "Accept-Encoding"?: "gzip" | "identity";
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        /** @description Cache control directive for caching proxies */
                        "Cache-Control"?: string;
                        /** @description Timestamp of the latest resource update. Use it as `?updatedSince` query parameter to obtain only newer data than this value. */
                        "x-last-modified"?: string;
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example FeatureCollection */
                            type?: string;
                            features?: (components["schemas"]["FeaturePoint"] & {
                                properties?: components["schemas"]["VehiclepositionCompound"];
                            })[];
                        };
                    };
                };
                401: components["responses"]["UnauthorizedError"];
                /** @description Not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/vehiclepositions/{gtfsTripId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** GET Vehicle Position */
        get: {
            parameters: {
                query?: {
                    /** @description Enrich result dataset with not tracking trip (last tracked vehicle after its trip) */
                    includeNotTracking?: boolean;
                    /** @description Enrich result dataset with positions */
                    includePositions?: boolean;
                    /** @description Preferred timezone offset by given Country/City (use encoded slash sign by %2F or use _ sign) */
                    preferredTimezone?: string;
                };
                header?: {
                    /** @description Indicate the content encoding (usually a compression algorithm) that the client can understand. See [mdn](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Accept-Encoding) for more details. Note that for this endpoint, if no value is given, gzip compression will be used by default (the `identity` value can be used to opt out of the default compression). */
                    "Accept-Encoding"?: "gzip" | "identity";
                };
                path: {
                    /** @description Filter result by trip id (gtfs_trip_id) */
                    gtfsTripId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        /** @description Cache control directive for caching proxies */
                        "Cache-Control"?: string;
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["FeaturePoint"] & {
                            properties?: components["schemas"]["VehiclepositionCompound"];
                        };
                    };
                };
                401: components["responses"]["UnauthorizedError"];
                /** @description Not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/vehiclepositions/gtfsrt/trip_updates.pb": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** GET GTFS-RT Trip Updates Feed */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        "Cache-Control": components["headers"]["CacheControlNoCache"];
                        "Last-Modified": components["headers"]["LastModified"];
                        [name: string]: unknown;
                    };
                    content: {
                        "application/octet-stream": string;
                    };
                };
                401: components["responses"]["UnauthorizedError"];
                /** @description Not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/vehiclepositions/gtfsrt/vehicle_positions.pb": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** GET GTFS-RT Vehicle Positions Feed */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        "Cache-Control": components["headers"]["CacheControlNoCache"];
                        "Last-Modified": components["headers"]["LastModified"];
                        [name: string]: unknown;
                    };
                    content: {
                        "application/octet-stream": string;
                    };
                };
                401: components["responses"]["UnauthorizedError"];
                /** @description Not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/vehiclepositions/gtfsrt/pid_feed.pb": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** GET GTFS-RT PID Feed (trip updates and vehicle positions, combined) */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        "Cache-Control": components["headers"]["CacheControlNoCache"];
                        "Last-Modified": components["headers"]["LastModified"];
                        [name: string]: unknown;
                    };
                    content: {
                        "application/octet-stream": string;
                    };
                };
                401: components["responses"]["UnauthorizedError"];
                /** @description Not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/vehiclepositions/gtfsrt/alerts.pb": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** GET GTFS-RT Service Alerts Feed */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        "Cache-Control": components["headers"]["CacheControlNoCache"];
                        "Last-Modified": components["headers"]["LastModified"];
                        [name: string]: unknown;
                    };
                    content: {
                        "application/octet-stream": string;
                    };
                };
                401: components["responses"]["UnauthorizedError"];
                /** @description Not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/pid/departureboards": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * GET Departure Boards
         * @description You have to use query parameters `ids`, `cisIds`, `aswIds` or `names` in array format - eg. `ids[]=1&ids[]=3`. **At least one of these IDs is required.** The maximum is 100 stops combined in one request.
         */
        get: {
            parameters: {
                query?: {
                    /** @description Get result by GTFS stop_id. Can be used to retrive individual stops and to separate departures of Prague and intercity routes, even if they depart from the same physical stop. A list of GTFS stops can be found in `stops.txt` file of the [GTFS feed](https://opendata.praha.eu/datasets/https%3A%2F%2Fapi.opendata.praha.eu%2Flod%2Fcatalog%2F9a6a1d8e-45b9-41de-b9ae-0bcec7126876). */
                    ids?: string;
                    /** @description Get result by ASW ID. First part of the number represents the whole node. Usually it groups the stops of the same name or all stops associated with a metro station. Also returns related train stations in the node. The second part of the number is optional and represents individual stops in the node. Use `_` instead of `/` as a separator or encode the slash sign with `%2F`. A list of ASW IDs can be found in [Prague Open data](https://opendata.praha.eu/datasets/https%3A%2F%2Fapi.opendata.praha.eu%2Flod%2Fcatalog%2F6ac8381f-ea19-4ea9-8949-92076809dc5a). ⚠️ Note: combination with `includeMetroTrains` is currently not supported, see [issue pid#222](https://gitlab.com/operator-ict/golemio/code/modules/pid/-/issues/222). */
                    aswIds?: string;
                    /** @description Get result by CIS ID. A list of CIS IDs can be found in [Prague Open data](https://opendata.praha.eu/datasets/https%3A%2F%2Fapi.opendata.praha.eu%2Flod%2Fcatalog%2F6ac8381f-ea19-4ea9-8949-92076809dc5a). */
                    cisIds?: number;
                    /** @description Get results by exact name of stop (case and whitespace sensitive). May return stops of the same name from different towns. Using `names` in combination with other identifiers will return an intersection of stops with `names` and stops of ASW, CIS or GTFS identifiers in the same node. Use this feature to filter out a subset of stops of the same name while guaranteeing them to be from the desired node only. */
                    names?: string;
                    /** @description Set the start of interval from which to retrieve departures. Positive numbers are set in past relative to the time of request or `timeFrom` timestamp, negative numbers set the start in the future. Use to compensate for walking distance to a stop. Default is set to 0. Maximum value is 30 because of implemented data retention. Minimum value is -4320 (0 - 3 days GTFS calendar maximum). */
                    minutesBefore?: number;
                    /** @description Set the end of interval from which to retrieve departures. Positive numbers are set in future relative to the time of request or `timeFrom` timestamp, negative are in the past. The sum of minutesBefore and minutesAfter must be larger than zero. Default is set to 180. Maximum value is 4320 (GTFS calendar maximum). Minimum value is -4350 (0 - 3 days GTFS calendar maximum - 30 minutes data retention). */
                    minutesAfter?: number;
                    /** @description Set initial timestamp for time interval given by `minutesBefore` and `minutesAfter`. Use to simulate query time different from now. Use ISO 8601 time format and URL encoded symbols - `%3A` for `:`, `%2B` for `.`, `%2F` for `+`. Time zone is set according to the `preferredTimezone` parameter. Applicable range is -6 hours +2 days from now. */
                    timeFrom?: string;
                    /** @description When selecting a node by `name`, when `true`, will include metro and/or train stops that are a member of the same node. I.e. when querying _Na Knížecí_, setting this to `true` will add the metro station _Anděl_ to results as well because both have the same ASW node number 1040. ⚠️ Note: combination with `aswIds` is currently not supported, see [issue pid#222](https://gitlab.com/operator-ict/golemio/code/modules/pid/-/issues/222). */
                    includeMetroTrains?: boolean;
                    /** @description Enrich departures with vehicle air condition information. Setting to `false` will force all items to be `null`. Useful for disabling the indication of air condition during cold season. */
                    airCondition?: boolean;
                    /** @description Preferred timezone offset as defined in the IANA Time zone database in the form of Country/City (use an URL encoded slash sign `%2F` or use an underscore _ symbol), default is Europe/Prague */
                    preferredTimezone?: string;
                    /** @description Valid entries: `departures` (default), `arrivals`, `mixed`. Set how to handle behaviour in end stops. `departures` (default) returns all connections that depart from selected stops (does not return connections for which it is the final stop). `arrivals` returns all connections that arrive into the stops (does not return connections for which it is the first stop). `mixed` returns everything. Use `arrivals` to create dedicated arrival boards. Use `departures` for all other cases. Using `mixed` is not recomended as departures of adjoined routes will be returned twice. */
                    mode?: string;
                    /** @description Valid entries: `real` (default), `timetable`. Order results by predicted time including trip delay or by timetable time. */
                    order?: string;
                    /** @description Valid entries: `none` (default), `routeOnce`, `routeOnceFill`, `routeHeadingOnce`, `routeHeadingOnceFill`, `routeHeadingOnceNoGap`, `routeHeadingOnceNoGapFill`. Defines how should be the list of departures returned. `none` returns all departures within the time and item limit. `routeOnce` returns exactly one occurence of departure for each `route_id`. Works best when querying a single stop. `routeHeadingOnce` returns one entry for each pair of `route_id` and `trip_headsign`, i.e. returns departures for routes that have multiple end stops. Works well when quering one or more stops in a node. `...NoGap` will ensure that departures with a distinct trip headsign will not be displayed if they should arrive too far in the future. `...Fill` attributes will behave the same as their namesakes but afterwards will fill the rest of request up to `total/limit` with further departures. Use to have every line/destination represented and have the display filled with departures at the same time. */
                    filter?: string;
                    /** @description Valid entries: `canceled`, `atStop`, `untracked`. Skips trips with these attributes. Use multiple rules with `&skip[]=cancelled&skip[]=atStop` query parameter array form. */
                    skip?: string;
                    /** @description Limits the number of items in response. The maximum is 1000 (default value is 20). */
                    limit?: number;
                    /** @description Sets the number of items that will be queried. Use in conjunction with `offset`. Up to `total - offset`, but not more than `limit` items will be then returned. If unset, is same as `limit`. The maximum is 1000 (default value is 20). */
                    total?: number;
                    /** @description Number of the initial departures that are skipped. Useful for multi-page displays. */
                    offset?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Can return empty data in departures property (empty array []) if no departures were found */
                200: {
                    headers: {
                        /** @description Cache control directive for caching proxies */
                        "Cache-Control"?: string;
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["PIDDepartureBoard"];
                    };
                };
                401: components["responses"]["UnauthorizedError"];
                /** @description Not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/pid/infotexts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** GET Infotexts (export from the legacy VYMI system) */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description List of all active infotexts */
                200: {
                    headers: {
                        /** @description Cache control directive for caching proxies */
                        "Cache-Control"?: string;
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": (components["schemas"]["PIDDepartureBoardInfotext"] & {
                            related_stops?: {
                                /**
                                 * @description GTFS station IDs for which the infotexts apply.
                                 * @example U118S1
                                 */
                                id?: string;
                                /**
                                 * @description GTFS station name.
                                 * @example Flora
                                 */
                                name?: string;
                                /**
                                 * @description GTFS station platform code.
                                 * @example null
                                 */
                                platform_code?: string | null;
                            }[];
                            /** @example [
                             *       "L152",
                             *       "L177"
                             *     ] */
                            related_routes?: string[];
                            /**
                             * @description Legacy VYMI event identifier.
                             * @example 83
                             */
                            vymi_id?: number;
                            /**
                             * @description Legacy VYMI database identifier.
                             * @example 3
                             */
                            vymi_id_dtb?: number;
                            /** @example 2021-01-07T12:48:06+01:00 */
                            expiration_date?: string | null;
                            /** @example 2021-01-07T12:48:06+01:00 */
                            last_updated?: string;
                            /**
                             * @description Legacy ROPID VYMI user.
                             * @example user
                             */
                            last_updated_user?: string;
                        })[];
                    };
                };
                401: components["responses"]["UnauthorizedError"];
                /** @description Not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v3/pid/infotexts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** GET Infotexts (export from the VYMI (JIS) Infotexts system) */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description List of all active infotexts */
                200: {
                    headers: {
                        /** @description Cache control directive for caching proxies */
                        "Cache-Control"?: string;
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": (components["schemas"]["PIDDepartureBoardInfotext"] & {
                            /**
                             * @description Priority of the infotext. If multiple infotexts are active for the same stop, the ones with higher priority will be displayed.
                             *     Mapped from the VYMI (JIS) system's severity level in the following way:
                             *     - "INFO" -> "low"
                             *     - "WARNING" -> "normal"
                             *     - "SEVERE" -> "high"
                             *
                             * @example high
                             * @enum {string}
                             */
                            priority: "low" | "normal" | "high";
                            related_stops: {
                                /**
                                 * @description GTFS station IDs for which the infotexts apply.
                                 * @example U118S1
                                 */
                                id: string;
                                /**
                                 * @description GTFS station name.
                                 * @example Flora
                                 */
                                name: string;
                                /**
                                 * @description GTFS station platform code.
                                 * @example null
                                 */
                                platform_code: string | null;
                            }[];
                            /**
                             * Format: uuid
                             * @description VYMI (JIS) Infotexts identifier.
                             * @example 40507cee-6468-488e-ba78-e36d9c20e67c
                             */
                            id: string;
                        })[];
                    };
                };
                401: components["responses"]["UnauthorizedError"];
                /** @description Not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/public/gtfs/trips/{gtfsTripId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * GET GTFS Trip
         * @description Get GTFS static trip info by trip ID, including associated stop times (without no stop waypoints) and shapes.
         */
        get: {
            parameters: {
                query: {
                    /**
                     * @description Choose which scopes to include in response.
                     * @example [
                     *       "info"
                     *     ]
                     */
                    scopes: ("info" | "stop_times" | "shapes" | "vehicle_descriptor")[];
                };
                header?: {
                    /** @description Indicate the content encoding (usually a compression algorithm) that the client can understand. See [mdn](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Accept-Encoding) for more details. Note that for this endpoint, if no value is given, gzip compression will be used by default (the `identity` value can be used to opt out of the default compression). */
                    "Accept-Encoding"?: "gzip" | "identity";
                };
                path: {
                    /** @description Filter result by GTFS trip ID. */
                    gtfsTripId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        /** @description Cache control directive for caching proxies */
                        "Cache-Control"?: string;
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json; charset=utf-8": components["schemas"]["ScopeStaticInfo"] & components["schemas"]["ScopeStaticStopTimes"] & components["schemas"]["ScopeShapes"] & components["schemas"]["ScopeStaticVehicleDescriptor"];
                    };
                };
                401: components["responses"]["UnauthorizedError"];
                /** @description Not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/public/vehiclepositions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** GET All Vehicle Positions */
        get: {
            parameters: {
                query?: {
                    /**
                     * @description Filter by bounding box in format "topLeft.lat,topLeft.lon,bottomRight.lat,bottomRight.lon", polygons that fit only partialy to selected bounding box are included
                     * @example 50.123,14.243,50.017,14.573
                     */
                    boundingBox?: string;
                    /**
                     * @description Filter by short name of route. URL: `?routeShortName=381&routeShortName=X1`
                     * @example [
                     *       "381",
                     *       "X1"
                     *     ]
                     */
                    routeShortName?: string[];
                    /**
                     * @description filter by transport type
                     * @example metro
                     */
                    routeType?: ("tram" | "metro" | "train" | "bus" | "ferry" | "funicular" | "trolleybus")[];
                };
                header?: {
                    /** @description Indicate the content encoding (usually a compression algorithm) that the client can understand. See [mdn](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Accept-Encoding) for more details. Note that for this endpoint, if no value is given, gzip compression will be used by default (the `identity` value can be used to opt out of the default compression). */
                    "Accept-Encoding"?: "gzip" | "identity";
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        /** @description Cache control directive for caching proxies */
                        "Cache-Control"?: string;
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json; charset=utf-8": {
                            features?: components["schemas"]["VehiclePositionsFeature"][];
                            /** @example FeatureCollection */
                            type?: string;
                        };
                    };
                };
                401: components["responses"]["UnauthorizedError"];
                /** @description Not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/public/vehiclepositions/{vehicleId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** GET Vehicle Positions */
        get: {
            parameters: {
                query: {
                    /**
                     * @description Choose which scopes to include in response.
                     * @example [
                     *       "info"
                     *     ]
                     */
                    scopes: ("info" | "stop_times" | "shapes" | "vehicle_descriptor")[];
                };
                header?: {
                    /** @description Indicate the content encoding (usually a compression algorithm) that the client can understand. See [mdn](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Accept-Encoding) for more details. Note that for this endpoint, if no value is given, gzip compression will be used by default (the `identity` value can be used to opt out of the default compression). */
                    "Accept-Encoding"?: "gzip" | "identity";
                };
                path: {
                    /** @description Filter result by vehicle ID (same as *vehicle_id* from the `/public/vehiclepositions` EP or *id* from GTFS-RT `VehicleDescriptor`) No stop waypoints are not included. */
                    vehicleId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        /** @description Cache control directive for caching proxies */
                        "Cache-Control"?: string;
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json; charset=utf-8": components["schemas"]["ScopeInfo"] & components["schemas"]["ScopeStopTimes"] & components["schemas"]["ScopeShapes"] & components["schemas"]["ScopeVehicleDescriptor"];
                    };
                };
                401: components["responses"]["UnauthorizedError"];
                /** @description Not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/public/vehiclepositions/{vehicleId}{gtfsTripId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * GET Vehicle RT data (additional lookup)
         * @description Same as `/public/vehiclepositions/{vehicleId}` but with additional lookup by GTFS trip ID. This may be useful when vehicle is serving the previous trip and you want to get info about the next trip.
         *     Combination of `vehicleId` and `gtfsTripId` is needed because multiple vehicles can serve the same trip, and we want to select the correct one.
         *     `gtfsTripId` is specified as a path matrix parameter.
         *     <br><br>Example: `/public/vehiclepositions/service-3-1001;gtfsTripId=115_107_180501`
         *
         */
        get: {
            parameters: {
                query: {
                    /**
                     * @description Choose which scopes to include in response.
                     * @example [
                     *       "info"
                     *     ]
                     */
                    scopes: ("info" | "stop_times" | "shapes" | "vehicle_descriptor")[];
                };
                header?: {
                    /** @description Indicate the content encoding (usually a compression algorithm) that the client can understand. See [mdn](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Accept-Encoding) for more details. Note that for this endpoint, if no value is given, gzip compression will be used by default (the `identity` value can be used to opt out of the default compression). */
                    "Accept-Encoding"?: "gzip" | "identity";
                };
                path: {
                    /** @description Filter result by vehicle ID (same as *vehicle_id* from the `/public/vehiclepositions` EP or *id* from GTFS-RT `VehicleDescriptor`). */
                    vehicleId: string;
                    /** @description Perform additional lookup by GTFS trip ID. */
                    gtfsTripId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        /** @description Cache control directive for caching proxies */
                        "Cache-Control"?: string;
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json; charset=utf-8": components["schemas"]["ScopeInfo"] & components["schemas"]["ScopeStopTimes"] & components["schemas"]["ScopeShapes"] & components["schemas"]["ScopeVehicleDescriptor"];
                    };
                };
                401: components["responses"]["UnauthorizedError"];
                /** @description Not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/public/departureboards": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Departure Boards */
        get: {
            parameters: {
                query: {
                    /**
                     * @description Groups of stop IDs formatted as JSON (index/priority -> stop IDs). For example ?stopIds[]={\"0\": [\"U717Z5P\"]}&stopIds[]={\"1\": [\"U718Z5P\", \"U719Z5P\"]}.
                     *     The maximum number of groups is 50. The maximum number of stops in one group is 50. The maximum number of stops combined is 50.
                     *
                     * @example [
                     *       "{\"0\": [\"U717Z5P\"]}",
                     *       "{\"1\": [\"U718Z5P\", \"U719Z5P\"]}"
                     *     ]
                     */
                    stopIds: string[];
                    /**
                     * @description Limit for each group of departures. Default is 5. Maximum is 30.
                     * @example 5
                     */
                    limit?: number;
                    /**
                     * @description Default is null
                     * @example [
                     *       "27"
                     *     ]
                     */
                    routeShortNames?: string[];
                    /**
                     * @description Default is 60. Maximum is 360 (6 hours)
                     * @example 60
                     */
                    minutesAfter?: number;
                };
                header?: {
                    /** @description Indicate the content encoding (usually a compression algorithm) that the client can understand. See [mdn](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Accept-Encoding) for more details. Note that for this endpoint, if no value is given, gzip compression will be used by default (the `identity` value can be used to opt out of the default compression). */
                    "Accept-Encoding"?: "gzip" | "identity";
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        /** @description Cache control directive for caching proxies */
                        "Cache-Control"?: string;
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["PublicDepartureGroup"][];
                    };
                };
                400: components["responses"]["BadRequestError"];
                401: components["responses"]["UnauthorizedError"];
                /** @description Not found - no stops found for the given query parameters */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": Record<string, never>[][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** GTFS Service */
        GTFSService: {
            /** @example 20190311 */
            end_date: string;
            /** @example 2018-09-09 12:32:45 */
            last_modify?: string | null;
            /**
             * Format: int64
             * @example 1
             */
            monday: number;
            /**
             * Format: int64
             * @example 1
             */
            tuesday: number;
            /**
             * Format: int64
             * @example 1
             */
            wednesday: number;
            /**
             * Format: int64
             * @example 1
             */
            thursday: number;
            /**
             * Format: int64
             * @example 1
             */
            friday: number;
            /**
             * Format: int64
             * @example 1
             */
            saturday: number;
            /**
             * Format: int64
             * @example 1
             */
            sunday: number;
            /** @example 1111111-1 */
            service_id?: string;
            /** @example 20190226 */
            start_date?: string;
        };
        /** GTFS Trip */
        GTFSTrip: {
            /** @example 991_1165_190107 */
            trip_id: string;
            /**
             * Format: int64
             * @example 1
             */
            bikes_allowed: number;
            /** @example  */
            block_id?: string | null;
            /**
             * Format: int64
             * @example 0
             */
            direction_id?: number;
            /**
             * Format: int64
             * @example 0
             */
            exceptional?: number;
            /** @example 2018-09-09 12:32:45 */
            last_modify?: string | null;
            /** @example L991 */
            route_id: string;
            /** @example 1111100-1 */
            service_id: string;
            /** @example L991V3 */
            shape_id: string;
            /** @example Nemocnice Motol */
            trip_headsign: string;
            /**
             * Format: int64
             * @example 1
             */
            wheelchair_accessible: number;
        };
        /** GTFS Stop */
        GTFSStop: {
            /**
             * Format: int64
             * @example 0
             */
            location_type: number;
            /** @example U118S1 */
            parent_station: string | null;
            /** @example A */
            platform_code: string;
            /** @example U118Z101P */
            stop_id: string;
            /** @example Flora */
            stop_name: string;
            /**
             * Format: int64
             * @example 2
             */
            wheelchair_boarding: number;
            /** @example P */
            zone_id: string;
            /** @example U118L2 */
            level_id: string | null;
        };
        /** GTFS Stop Time */
        GTFSStopTime: {
            /** @example 13:12:05 */
            arrival_time: string;
            /** @example 13:12:35 */
            departure_time: string;
            /** @example 0 */
            drop_off_type: string;
            /** @example 2018-09-09 12:32:45 */
            last_modify?: string | null;
            /** @example 0 */
            pickup_type: string;
            /**
             * Format: float
             * @example 3.73622
             */
            shape_dist_traveled: number;
            /** @example   */
            stop_headsign?: string;
            /** @example U921Z102P */
            stop_id: string;
            /**
             * Format: int64
             * @example 4
             */
            stop_sequence: number;
            /** @example 991_1156_180709 */
            trip_id: string;
        };
        /** GTFS Shape */
        GTFSShape: {
            /**
             * Format: float
             * @example 16.46309
             */
            shape_dist_traveled: number;
            /** @example L991V2 */
            shape_id: string;
            /**
             * Format: int64
             * @example 123
             */
            shape_pt_sequence: number;
        };
        /** GTFS Route */
        GTFSRoute: {
            /** @example 99 */
            agency_id: string;
            /** @example false */
            is_night: boolean;
            /** @example false */
            is_regional: boolean;
            /** @example false */
            is_substitute_transport: boolean;
            /** @example 2018-09-09 12:32:45 */
            last_modify?: string | null;
            /** @example 00A562 */
            route_color: string;
            /** @example null */
            route_desc?: string | null;
            /** @example L991 */
            route_id: string;
            /** @example Nemocnice Motol - Petřiny - Skalka - Depo Hostivař */
            route_long_name: string;
            /** @example A */
            route_short_name: string;
            /** @example FFFFFF */
            route_text_color: string;
            /** @example 1 */
            route_type: number;
            /** @example https://pid.cz/linka/A */
            route_url: string;
        };
        /**
         * Point
         * @example [
         *       14.4633,
         *       50.07827
         *     ]
         */
        Point: number[];
        /** Feature Point */
        FeaturePoint: {
            geometry: {
                /** @example Point */
                type: string;
                coordinates: components["schemas"]["Point"];
            };
            properties: Record<string, never>;
            /** @example Feature */
            type: string;
        };
        /** Vehicleposition Compound */
        VehiclepositionCompound: {
            /** @description Trip properties */
            trip?: components["schemas"]["VehiclepositionTrip"];
            /** @description Properties of last known position */
            last_position?: components["schemas"]["VehiclepositionPosition"];
            /** @description All known positions with their properties */
            all_positions?: {
                /** @example FeatureCollection */
                type: string;
                features?: (components["schemas"]["FeaturePoint"] & {
                    properties?: components["schemas"]["VehiclepositionPosition"];
                })[];
            };
        };
        /** Vehicleposition Trip */
        VehiclepositionTrip: {
            agency_name?: {
                /**
                 * @description Agency name that normally operates the trip
                 * @example OAD KO Kolín
                 */
                real: string;
                /**
                 * @description Agency name that currently operates the trip (normally identical to planned_agency_name)
                 * @example OAD KO Kolín
                 */
                scheduled: string;
            };
            /** @description All properties that come from nation central information system */
            cis?: {
                /**
                 * @description Full line number
                 * @example 100381
                 */
                line_id: string;
                /**
                 * Format: int64
                 * @description Trip number (unique within specific cis_line_id)
                 * @example 29
                 */
                trip_number: number;
            };
            /**
             * Format: int64
             * @description Identifier of trip sequence operated by a single vehicle
             * @example 1
             */
            sequence_id: number;
            /**
             * @description Name of the route from which the vehicle originates
             * @example 381
             */
            origin_route_name: string;
            /** @description All properties tied with GTFS data format */
            gtfs?: {
                /**
                 * @description Identifier of the owner route in the GTFS Static feed
                 * @example L381
                 */
                route_id: string;
                /**
                 * @description Identification of the line used for the public
                 * @example 381
                 */
                route_short_name: string;
                /**
                 * @description Identifier of the route type in the GTFS Static feed
                 * @example 1
                 */
                route_type: number;
                /**
                 * @description Identifier of the trip in the GTFS Static feed
                 * @example 381_51_180728
                 */
                trip_id: string;
                /**
                 * @description Heading of the trip (identical to what is shown on the bus)
                 * @example Sídliště Modřany
                 */
                trip_headsign?: string | null;
            };
            /**
             * @description Timestamp of arrival time in first stop (UTC)
             * @example 2019-03-18T11:00:00.000Z
             */
            start_timestamp: string;
            /** @description Type of vehicle */
            vehicle_type?: components["schemas"]["VehiclepositionVehicleType"];
            /**
             * Format: int64
             * @description Four-digit identifier of the vehicle in the system
             * @example 8635
             */
            vehicle_registration_number: number;
            /**
             * @description Determines whether the vehicle has wheelchair access
             * @example true
             */
            wheelchair_accessible: boolean;
            /**
             * @description Determines whether the vehicle has air conditioning. If `null`, the information is not available or the vehicle's registration number is not known.
             * @example false
             */
            air_conditioned: boolean | null;
            /**
             * @description Determines whether the vehicle has USB chargers. If `null`, the information is not available or the vehicle's registration number is not known.
             * @example false
             */
            usb_chargers?: boolean | null;
        };
        /** Vehicleposition Vehicle Type */
        VehiclepositionVehicleType: {
            /**
             * Format: int64
             * @description Unique id code of type
             * @example 1
             */
            id: number;
            /**
             * @description Description of type in Czech
             * @example Autobus
             */
            description_cs: string;
            /**
             * @description Description of type in English
             * @example Bus
             */
            description_en: string;
        };
        /** Vehicleposition Position */
        VehiclepositionPosition: {
            /**
             * Format: int64
             * @description Bearing, in degrees (0 = north, 90 = east, 180 = south, 270 = west)
             * @example 34
             */
            bearing: number | null;
            delay?: {
                /**
                 * Format: int64
                 * @description Current delay, in seconds, based on actual location of a trip on its shape between stops
                 * @example 213
                 */
                actual?: number | null;
                /**
                 * Format: int64
                 * @description Delay, in seconds, at the last confirmed stop on arrival. Null, if the arrival time to the last stop equal departure time
                 * @example 23
                 */
                last_stop_arrival?: number | null;
                /**
                 * Format: int64
                 * @description Delay, in seconds, at the last confirmed stop on departure. Null, if it was a terminal stop.
                 * @example -84
                 */
                last_stop_departure?: number | null;
            };
            /** @description Properties for last stop passed */
            last_stop?: {
                /**
                 * @description GTFS Static identifier of the last stop passed on the route of the trip
                 * @example 331
                 */
                id: string | null;
                /**
                 * @description Sequence number of the last stop passed on the route of the trip
                 * @example 11
                 */
                sequence: number | null;
                /**
                 * @description Scheduled arrival time to the last passed stop (UTC)
                 * @example 2019-03-18T11:00:00.000Z
                 */
                arrival_time: string | null;
                /**
                 * @description Scheduled departure time from the last passed stop (UTC)
                 * @example 2019-03-18T11:04:00.000Z
                 */
                departure_time: string | null;
            };
            /** @description Properties of the next stop on the route of the trip */
            next_stop?: {
                /**
                 * @description GTFS Static identifier of the next stop on the route of the trip
                 * @example 334
                 */
                id: string | null;
                /**
                 * @description Sequence number of the next stop on the route of the trip
                 * @example 12
                 */
                sequence: number | null;
                /**
                 * @description Scheduled arrival time of the next stop on the route of the trip
                 * @example 2019-03-18T11:10:00.000Z
                 */
                arrival_time: string | null;
                /**
                 * @description Scheduled departure time of the next stop on the route of the trip
                 * @example 2019-03-18T11:14:00.000Z
                 */
                departure_time: string | null;
            };
            /**
             * @description True, if the trip was canceled. Other fields about the position have non-defined values in case this value is true
             * @example false
             */
            is_canceled: boolean | null;
            /**
             * @description Time at which the position was sent from the vehicle (UTC)
             * @example 2019-03-18T11:00:00.000Z
             */
            origin_timestamp: string;
            /**
             * Format: int64
             * @description Current speed of the vehicle (kilometers per hour)
             * @example 34
             */
            speed?: number | null;
            /**
             * @description Number of kilometers traveled on the route
             * @example 12.3
             */
            shape_dist_traveled?: string | null;
            /**
             * @description True if trip is tracked, meaning that trip is on its track.
             * @example false
             */
            tracking?: boolean;
        };
        /** PID Departure Board */
        PIDDepartureBoard: {
            /** @description List of stops in the requested set and their properties. */
            stops?: components["schemas"]["PIDDepartureBoardStop"][];
            /** @description List of departures. */
            departures?: components["schemas"]["PIDDepartureBoardDeparture"][];
            /** @description List of active infotexts for selected stops. */
            infotexts?: (components["schemas"]["PIDDepartureBoardInfotext"] & {
                related_stops?: string[];
            })[];
        };
        /** PID Departure Board Departure */
        PIDDepartureBoardDeparture: {
            arrival_timestamp?: components["schemas"]["PIDDepartureBoardStopTime"];
            delay?: components["schemas"]["PIDDepartureBoardDelay"];
            departure_timestamp?: components["schemas"]["PIDDepartureBoardStopTime"];
            last_stop?: components["schemas"]["PIDDepartureBoardLastStop"];
            route?: components["schemas"]["PIDDepartureBoardRoute"];
            stop?: components["schemas"]["PIDDepartureBoardStopReference"];
            trip?: components["schemas"]["PIDDepartureBoardTrip"];
        };
        /** PID Departure Board Infotext */
        PIDDepartureBoardInfotext: {
            /**
             * @description Intended time of infotext publishing in ISO String.
             * @example 2024-02-07T13:11:00+01:00
             */
            valid_from: string | null;
            /**
             * @description Intended time of infotext removal in ISO String. If `null`, the infotext is valid indefinitely
             * @example 2024-02-08T13:11:00+01:00
             */
            valid_to: string | null;
            /**
             * @description Information text in Czech.
             * @example Nehoda na trase, odklon linek mimo tuto stanici.
             */
            text: string;
            /**
             * @description Information text in English.
             * @example Trips are cancelled due to accident on route.
             */
            text_en: string | null;
            /**
             * @description Type of display on board by the intended form of presentation (where applicable). Enumerating `inline` (to be presented along with departures, usually in a marquee), `general` (to be displayed full screen instead of departures), `general-alternate` (full screen alternates with departures).
             * @example inline
             * @enum {string}
             */
            display_type: "inline" | "general";
        };
        /** PID Departure Board Trip */
        PIDDepartureBoardTrip: {
            /**
             * @description The equivalent of arrows that are printed on stop signs. Indicates the direction the vehicle will continue at stops where routes split up relative to the direction of motion of the vehicle. Valid values: `null` (do not display the arrow), `top`, `top-right`, `right`, `bottom-right`, `bottom`, `bottom-left`, `left`, `top-left`.
             * @example top-left
             */
            direction: string | null;
            /**
             * @description Trip headsign (usually the final stop).
             * @example Chodov
             */
            headsign: string;
            /**
             * @description GTFS trip ID.
             * @example 140_224_200302
             */
            id: string;
            /**
             * @description True if vehicle is physically present in the stop. Applicable only to connections with delay available.
             * @example true
             */
            is_at_stop: boolean;
            /**
             * @description True if the trip is canceled.
             * @example false
             */
            is_canceled: boolean;
            /**
             * @description True if the vehicle being used on this trip is wheelchair accessible. Metro trips are deemed accessible if the station is accessible.
             * @example false
             */
            is_wheelchair_accessible: boolean;
            /**
             * @description Determines whether the vehicle has air conditioning. If `null`, the information is not available or the vehicle's registration number is not known.
             * @example false
             */
            is_air_conditioned: boolean | null;
            /**
             * @description The number of a particular train, otherwise `null`.
             * @example Os 9327
             */
            short_name: string | null;
        };
        /** PID Departure Board Last Stop */
        PIDDepartureBoardLastStop: {
            /**
             * @description Name of the last stop the vehicle reported from.
             * @example Prosecká
             */
            name: string | null;
            /**
             * @description GTFS ID of the stop.
             * @example U754Z1P
             */
            id: string | null;
        };
        /** PID Departure Board Stop */
        PIDDepartureBoardStop: {
            /**
             * @description Level of metro stops.
             * @example U118L2
             */
            level_id: string | null;
            /**
             * @description Describes the type of stop, is always `0`.
             * @example 0
             */
            location_type: number;
            /**
             * @description A GTFS identifier of the parent station for metro platforms.
             * @example U118S1
             */
            parent_station: string;
            /**
             * @description Human-friendly code used to distinguish a stop inside a node. Multiple GTFS codes can share a platform code.
             * @example A
             */
            platform_code: string;
            /**
             * Format: float
             * @description Latitude of the stop marker or the center of metro or train station platform.
             * @example 50.4
             */
            stop_lat: number;
            /**
             * Format: float
             * @description Longitude of the stop marker or the center of metro or train station platform.
             * @example 50.4
             */
            stop_lon: number;
            /** @description ASW ID of the stop. */
            asw_id: components["schemas"]["ASWid"];
            /**
             * @description GTFS ID of the stop. Stops that will be valid in the future have the date of the start of their validity appended, i.e. `U476Z51P_210401`.
             * @example U118Z101P
             */
            stop_id: string;
            /**
             * @description Name of the stop.
             * @example Flora
             */
            stop_name: string;
            /**
             * @description Indicates accessibility of the stop by wheelchairs. `0` – unknown, `1` – accessible, `2` – inaccessible
             * @example 2
             */
            wheelchair_boarding: number;
            /**
             * @description PID fare zone. Multiple zones are separated by a comma.
             * @example P
             */
            zone_id: string;
        };
        /** ASW id */
        ASWid: {
            /**
             * @description ASW ID of node
             * @example 100
             */
            node: number;
            /**
             * @description Identification of the stop within the node.
             * @example 2
             */
            stop: number;
        };
        /** PID Departure Board Stop Reference */
        PIDDepartureBoardStopReference: {
            /**
             * @description GTFS ID of the stop the vehicle is stopping at.
             * @example U754Z1P
             */
            id: string;
            /**
             * @description For trains it is the platform number the train is stopping at. Is `null` if not known. For other modes of transport, returns the platform code from `stops[]`.
             * @example B
             */
            platform_code: string | null;
        };
        /** PID Departure Board Delay */
        PIDDepartureBoardDelay: {
            /**
             * @description True if information about trip's delay is available.
             * @example false
             */
            is_available: boolean;
            /**
             * @description Delay rounded down to minutes.
             * @example 3
             */
            minutes: number | null;
            /**
             * @description Delay in seconds.
             * @example 176
             */
            seconds: number | null;
        };
        /** PID Departure Board Stop Time */
        PIDDepartureBoardStopTime: {
            /**
             * @description Time of arrival/departure including realtime delay as an ISO String (UTC). Is `null` on start/end stops. Is same as scheduled time when no delay is available. Is `null` on first/last stops.
             * @example 2019-05-18T07:38:20.000Z
             */
            predicted: string;
            /**
             * @description Time of arrival/departure as ISO string (UTC).
             * @example 2019-05-18T07:38:00.000Z
             */
            scheduled: string;
            /**
             * @description Number of minutes till departure. If it is less than 30 second it returns value "<1".
             * @example <1
             */
            minutes?: string;
        };
        /** PID Departure Board Route */
        PIDDepartureBoardRoute: {
            /**
             * @description Route designation used by PID.
             * @example 140
             */
            short_name: string | null;
            /**
             * @description GTFS route type. `0` – tram, `1` – metro, `2` – train, `3` – bus, `4` – ferry, `7` – funicular, `11` – trolleybus
             * @example 3
             */
            type: number | null;
            /**
             * @description True if route is a designated night route.
             * @example true
             */
            is_night: boolean;
            /**
             * @description True if route serves areas outside Prague boundaries.
             * @example true
             */
            is_regional: boolean;
            /**
             * @description True if route provides substitute service for another route.
             * @example true
             */
            is_substitute_transport: boolean;
        };
        VehiclePositionsFeature: {
            /** @description GeoJson geometry */
            geometry?: {
                coordinates?: number[] | number[][][] | number[][][][];
                /** @enum {string} */
                type?: "Point" | "Polygon" | "MultiPolygon";
            };
            properties?: {
                /** @example 705_735_231002 */
                gtfs_trip_id: string;
                /** @example bus */
                route_type: string;
                /** @example 705 */
                gtfs_route_short_name: string;
                /** @example 221 */
                bearing?: number | null;
                /** @example 20 */
                delay?: number | null;
                /** @example service-3-8585 */
                vehicle_id?: string;
                /** @example at_stop */
                state_position?: string;
            };
            /** @example Feature */
            type?: string;
        };
        ScopeInfo: {
            /** @example 115_107_180501 */
            gtfs_trip_id?: string;
            /**
             * @example bus
             * @enum {string}
             */
            route_type?: "tram" | "metro" | "train" | "bus" | "ferry" | "funicular" | "trolleybus" | "ext_miscellaneous";
            /** @example 22 */
            route_short_name?: string;
            /** @example L22V3 */
            shape_id?: string | null;
            /** @example 22 */
            origin_route_name?: string | null;
            /** @example 1 */
            run_number?: number | null;
            /** @example Bílá Hora */
            trip_headsign?: string | null;
            geometry?: components["schemas"]["GeometryPoint"];
            /**
             * @description Distance travelled from the first stop of the trip.
             * @example 22.804
             */
            shape_dist_traveled?: number | null;
            /**
             * @description Bearing of the vehicle in degrees (0-360).
             * @example 45
             */
            bearing?: number | null;
            /**
             * @description Delay of the vehicle in seconds.
             * @example 10
             */
            delay?: number | null;
            /**
             * @example at_stop
             * @enum {string}
             */
            state_position?: "before_track" | "before_track_delayed" | "at_stop" | "on_track" | "off_track" | "after_track" | "unknown";
            /**
             * @description index of last stop passed by the vehicle
             * @example 3
             */
            last_stop_sequence?: number | null;
            /**
             * @description time when vehicle send last update
             * @example 2023-12-06T12:00:00+01:00
             */
            origin_timestamp?: string | null;
        };
        ScopeStaticInfo: {
            /** @example 115_107_180501 */
            gtfs_trip_id?: string;
            /**
             * @example bus
             * @enum {string}
             */
            route_type?: "tram" | "metro" | "train" | "bus" | "ferry" | "funicular" | "trolleybus" | "ext_miscellaneous";
            /** @example 22 */
            route_short_name?: string;
            /** @example L22V3 */
            shape_id?: string | null;
            /** @example 22 */
            origin_route_name?: string | null;
            /** @example 1 */
            run_number?: number | null;
            /** @example Bílá Hora */
            trip_headsign?: string | null;
        };
        ScopeStopTimes: {
            stop_times?: components["schemas"]["PublicTripStopTimeFeatureCollection"];
        };
        ScopeStaticStopTimes: {
            stop_times?: components["schemas"]["PublicTripStaticStopTimeFeatureCollection"];
        };
        ScopeShapes: {
            shapes?: components["schemas"]["PublicTripShapeFeatureCollection"];
        };
        ScopeVehicleDescriptor: {
            vehicle_descriptor?: {
                /** @example DPP */
                operator?: string | null;
                /**
                 * @description Vehicle manufacturer and type (model)
                 * @example Solaris Urbino 8.9 LE
                 */
                vehicle_type?: string | null;
                /** @example true */
                is_wheelchair_accessible?: boolean | null;
                /** @example false */
                is_air_conditioned?: boolean | null;
                /** @example false */
                has_usb_chargers?: boolean | null;
                /** @example 1001 */
                vehicle_registration_number?: string | null;
            };
        };
        ScopeStaticVehicleDescriptor: {
            vehicle_descriptor?: {
                /** @example true */
                is_wheelchair_accessible?: boolean | null;
            };
        };
        PublicTripShapeFeatureCollection: {
            features?: {
                geometry?: components["schemas"]["GeometryPoint"];
                properties?: {
                    /**
                     * @description Distance from the first stop of the trip.
                     * @example 0
                     */
                    shape_dist_traveled?: number;
                };
                /** @example Feature */
                type?: string;
            }[];
            /** @example FeatureCollection */
            type?: string;
        };
        /** @description List of stop and arrival, departure times for the trip. */
        PublicTripStopTimeFeatureCollection: {
            features?: {
                geometry?: components["schemas"]["GeometryPoint"];
                properties?: {
                    /** @example Nádraží Veleslavín */
                    stop_name?: string;
                    /** @example 3 */
                    stop_sequence?: number;
                    /** @example P */
                    zone_id?: string | null;
                    /** @example true */
                    is_wheelchair_accessible?: boolean | null;
                    /** @example 0 */
                    shape_dist_traveled?: number;
                    /**
                     * @description Time for arrival to the stop according to trip schedule.
                     * @example 12:00:00
                     */
                    arrival_time?: string;
                    /**
                     * @description Time for departure from the stop according to trip schedule.
                     * @example 12:00:10
                     */
                    departure_time?: string;
                    /**
                     * @description Time for arrival to the stop according to realtime data or prediction based on current delay.
                     * @example 12:00:20
                     */
                    realtime_arrival_time?: string | null;
                    /**
                     * @description Time for departure from the stop according to realtime data or prediction based on current delay.
                     * @example 12:00:25
                     */
                    realtime_departure_time?: string | null;
                };
                /** @example Feature */
                type?: string;
            }[];
            /** @example FeatureCollection */
            type?: string;
        };
        /** @description List of stop and arrival, departure times for the trip. No stop waypoints are not included. */
        PublicTripStaticStopTimeFeatureCollection: {
            features?: {
                geometry?: components["schemas"]["GeometryPoint"];
                properties?: {
                    /** @example Nádraží Veleslavín */
                    stop_name?: string;
                    /** @example 3 */
                    stop_sequence?: number;
                    /** @example P */
                    zone_id?: string | null;
                    /** @example true */
                    is_wheelchair_accessible?: boolean | null;
                    /** @example 0 */
                    shape_dist_traveled?: number;
                    /**
                     * @description Time for arrival to the stop according to trip schedule.
                     * @example 12:00:00
                     */
                    arrival_time?: string;
                    /**
                     * @description Time for departure from the stop according to trip schedule.
                     * @example 12:00:10
                     */
                    departure_time?: string;
                };
                /** @example Feature */
                type?: string;
            }[];
            /** @example FeatureCollection */
            type?: string;
        };
        /** @description GeoJson point */
        GeometryPoint: {
            /**
             * @description Point
             * @example [
             *       14.441252,
             *       50.109318
             *     ]
             */
            coordinates?: number[];
            /** @enum {string} */
            type?: "Point";
        };
        PublicDepartureGroup: {
            departure: components["schemas"]["PublicDeparture"];
            stop: components["schemas"]["PublicDepartureStop"];
            route: components["schemas"]["PublicDepartureRoute"];
            trip: components["schemas"]["PublicDepartureTrip"];
            vehicle: components["schemas"]["PublicDepartureVehicle"];
        }[];
        PublicDeparture: {
            /**
             * Format: date-time
             * @example 2024-04-05T16:09:00+02:00
             */
            timestamp_scheduled: string;
            /**
             * Format: date-time
             * @example 2024-04-05T16:09:16+02:00
             */
            timestamp_predicted: string;
            /**
             * @description Delay in seconds
             * @example 0
             */
            delay_seconds?: number | null;
            /**
             * @description Minutes until the departure
             * @example 0
             */
            minutes: number;
        };
        PublicDepartureStop: {
            /** @example U717Z5P */
            id: string;
            /** @example 8 */
            sequence: number;
            /** @example E */
            platform_code?: string | null;
        };
        PublicDepartureRoute: {
            /**
             * @example tram
             * @enum {string}
             */
            type: "tram" | "metro" | "train" | "bus" | "ferry" | "funicular" | "trolleybus" | "ext_miscellaneous";
            /** @example 27 */
            short_name: string;
        };
        PublicDepartureTrip: {
            /** @example 27_3206_240318 */
            id: string;
            /** @example Libuš */
            headsign: string;
            /** @example false */
            is_canceled?: boolean | null;
        };
        PublicDepartureVehicle: {
            /** @example service-0-9072 */
            id?: string | null;
            /** @example true */
            is_wheelchair_accessible?: boolean | null;
            /** @example false */
            is_air_conditioned?: boolean | null;
            /** @example true */
            has_charger?: boolean | null;
        };
    };
    responses: {
        /** @description Bad request - invalid query parameters */
        BadRequestError: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    /** @example Bad request */
                    error_message: string;
                    /** @example 400 */
                    error_status: number;
                    /** @example {...} */
                    error_info?: string | null;
                };
            };
        };
        /** @description API key is missing or invalid */
        UnauthorizedError: {
            headers: {
                WWW_Authenticate?: string;
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    /** @example Unauthorized. Failed to authenticate user. */
                    error_message: string;
                    /** @example 401 */
                    error_status: number;
                };
            };
        };
    };
    parameters: never;
    requestBodies: never;
    headers: {
        /** @description Timestamp of the latest resource update. */
        LastModified: string;
        /** @description Cache control directive for caching proxies */
        CacheControlNoCache: string;
    };
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
